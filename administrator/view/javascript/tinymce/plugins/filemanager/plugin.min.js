(function(exports, undefined) {
    "use strict";
    var modules = {};
    function require(ids, callback) {
        var module, defs = [];
        for (var i = 0; i < ids.length; ++i) {
            module = modules[ids[i]] || resolve(ids[i]);
            if (!module) {
                throw "module definition dependecy not found: " + ids[i]
            }
            defs.push(module)
        }
        callback.apply(null, defs)
    }
    function define(id, dependencies, definition) {
        if (typeof id !== "string") {
            throw "invalid module definition, module id must be defined and be a string"
        }
        if (dependencies === undefined) {
            throw "invalid module definition, dependencies must be specified"
        }
        if (definition === undefined) {
            throw "invalid module definition, definition function must be specified"
        }
        require(dependencies,
        function() {
            modules[id] = definition.apply(null, arguments)
        })
    }
    function defined(id) {
        return !! modules[id]
    }
    function resolve(id) {
        var target = exports;
        var fragments = id.split(/[.\/]/);
        for (var fi = 0; fi < fragments.length; ++fi) {
            if (!target[fragments[fi]]) {
                return
            }
            target = target[fragments[fi]]
        }
        return target
    }
    var __moxman_interop_TinyMcePlugin = "moxman/interop/TinyMcePlugin";
    define(__moxman_interop_TinyMcePlugin, [],
    function(Loader, Env) {
        if (!window.tinymce) {
            return {}
        }
        tinymce.PluginManager.add("filemanager",
        function(editor, url) {
            var editorSettings = editor.settings;
            editorSettings.file_browser_callback = function(id, value, type, win) {
            	var zIndex = editor.windowManager.zIndex;
                if (tinymce.ui.FloatPanel) {
                    zIndex = tinymce.ui.FloatPanel.currentZIndex
                }

            	image_upload(id,'', {zIndex:zIndex,callback:function(data){
            		if(data)document.getElementById(id).value=data;
            	}});
            };

            editor.addCommand("mceInsertFile",
            function() {
                var selection = editor.selection;
                var zIndex = editor.windowManager.zIndex;
                if (tinymce.ui.FloatPanel) {
                    zIndex = tinymce.ui.FloatPanel.currentZIndex
                }

            	image_upload('','', {zIndex:zIndex,callback:function(data){
            		if(!data)return;
            		var isImage = /\.(gif|jpe?g|png)$/i.test(data);
                    var html='';
                    if (!isImage && !selection.isCollapsed()) {
                        editor.execCommand("mceInsertLink", data);
                        return false;
                    }
                    if (isImage) {
                        html = '<img src="'+data+'" />';
                    } else {
                        html = '<a href="'+data+'">Download</a>';
                    }
                    editor.execCommand("mceInsertContent", false, html);
            	}});
            });
            editor.addButton("insertfile", {
                icon: "browse",
                title: "Insert file",
                cmd: "mceInsertFile"
            });
        });
        
    });
})(this);